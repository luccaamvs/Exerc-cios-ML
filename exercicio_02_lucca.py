# -*- coding: utf-8 -*-
"""Exercicio-02-Lucca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kUesNFzVpBWKa4d-Zme1t_w6LNVyNNDs

Importações e carregamento
"""

# Bibliotecas necessárias
import pandas as pd

# Definir o diretório dos dados (opcional, se necessário)
data_dir = './'

# Carregamento dos dados de avaliações
avaliacoes = pd.read_csv(
    data_dir + '/u.data',
    sep='\t',
    names=['usuario_id', 'movie_id', 'nota', 'timestamp']
)

# Renomear as colunas de `avaliacoes` para padronizar
avaliacoes.rename(columns={
    'usuario_id': 'user_id',
    'nota': 'rating'
}, inplace=True)

# Carregamento dos dados dos filmes
movies = pd.read_csv(
    data_dir + '/u.item',
    sep='|',
    encoding='latin-1',
    header=None,
    names=[
        'movie_id', 'title', 'release_date', 'video_release_date', 'imdb_url',
        'unknown', 'Action', 'Adventure', 'Animation', 'Children\'s', 'Comedy',
        'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror',
        'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western'
    ]
)

# Não é necessário carregar ratings novamente, pois `avaliacoes já contém os mesmos dados
# ratings = pd.read_csv(   # Comentado porque é redundante
#     data_dir + '/u.data',
#     sep='\t',
#     names=['user_id', 'movie_id', 'rating', 'timestamp']
# )

# Visualizar os primeiros registros dos DataFrames
print("Avaliações:")
print(avaliacoes.head())

print("\nFilmes:")
print(movies.head())

ratings = pd.read_csv(
    data_dir + 'u.data', sep='\t', names=['user_id', 'movie_id', 'rating', 'timestamp']
)

"""Extrair ano de lançamento do filme"""

# Extraindo o ano de lançamento
movies['year'] = movies['release_date'].str.extract(r'(\d{4})').astype(float)

# Média de avaliação por filme
movie_means = ratings.groupby('movie_id')['rating'].mean().reset_index()
movie_means.columns = ['movie_id', 'mean_rating']
# Unindo ano e média
df = pd.merge(movies[['movie_id', 'year']], movie_means, on='movie_id').dropna()
X = df[['year']].values
y = df['mean_rating'].values

"""Modelo de Regressão Linear e Treinamento

"""

# Instancia e treina o modelo de Regressão Linear
modelo = LinearRegression()
modelo.fit(X, y)

# Faz as previsões nos dados de treino
y_previsto = modelo.predict(X)

# Avalia o desempenho do modelo
erro_quadratico_medio = mean_squared_error(y, y_previsto)
r2 = r2_score(y, y_previsto)
coeficiente = modelo.coef_[0]
intercepto = modelo.intercept_

# Exibe as métricas e parâmetros do modelo
print(f'Coeficiente da regressão: {coeficiente:.4f}')
print(f'Termo independente (intercepto): {intercepto:.2f}')
print(f'Erro Quadrático Médio (MSE): {erro_quadratico_medio:.2f}')
print(f'Coeficiente de determinação R²: {r2:.4f}')
print(f'Quantidade de filmes analisados: {len(df)}')

"""Exibição"""

# Visualizando o modelo de regressão ajustado
plt.figure(figsize=(8, 5))
plt.scatter(X, y, alpha=0.6, color='orange', label='Valores reais')
plt.plot(X, y_previsto, color='darkred', linewidth=2, label='Modelo ajustado')
plt.title('Regressão Linear: Média das Avaliações por Ano de Lançamento')
plt.xlabel('Ano de Lançamento')
plt.ylabel('Média das Avaliações')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()