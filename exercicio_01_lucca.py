# -*- coding: utf-8 -*-
"""Exercicio-01-Lucca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qXNgFi6WUkj6Xpv853RXzBKq3DqfBTCS
"""

# Bibliotecas necessárias
import pandas as pd
import matplotlib.pyplot as plt

# Carregamento dos dados de avaliações
avaliacoes = pd.read_csv('./u.data', sep='\t', names=['usuario_id', 'movie_id', 'nota', 'timestamp'])

# Carregamento dos dados dos filmes
filmes = pd.read_csv(
    './u.item',
    sep='|',
    encoding='latin-1',
    header=None,
    names=['movie_id', 'title', 'release_date', 'video_release_date', 'imdb_url',
           'unknown', 'Action', 'Adventure', 'Animation', "Children's", 'Comedy',
           'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror',
           'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']
)
# Visualização inicial dos dados
print('Exemplos iniciais de avaliações:')
print(avaliacoes.head())

print('\nInformações dos primeiros filmes:')
print(filmes[['movie_id', 'title', 'release_date']].head())

# Informações gerais sobre os dados
print('Informações sobre o DataFrame de avaliações:')
print(avaliacoes.info())

print('\nEstatísticas descritivas das notas:')
print(avaliacoes['nota'].describe())

# Quantidade de filmes e usuários únicos
total_filmes = avaliacoes['movie_id'].nunique()
total_usuarios = avaliacoes['usuario_id'].nunique()

print(f'\nNúmero total de filmes avaliados: {total_filmes}')
print(f'Número total de usuários: {total_usuarios}')

# Gráfico: distribuição das avaliações
plt.figure(figsize=(6, 4))
avaliacoes['nota'].hist(bins=5, color='skyblue', edgecolor='black')
plt.title('Distribuição das Avaliações')
plt.xlabel('Nota')
plt.ylabel('Frequência')
plt.grid(False)
plt.tight_layout()
plt.show()

# Identificação dos 10 filmes mais avaliados
frequencia_avaliacoes = avaliacoes.groupby('movie_id').size().reset_index(name='count')
top_avaliados = frequencia_avaliacoes.sort_values(by='count', ascending=False).head(10)
top_avaliados = pd.merge(top_avaliados, filmes[['movie_id', 'title']], on='movie_id')

print('\nFilmes com maior número de avaliações:')
print(top_avaliados[['title', 'count']])

# Gráfico: filmes mais avaliados
plt.figure(figsize=(8, 4))
plt.barh(top_avaliados['title'], top_avaliados['count'], color='salmon')
plt.title('Top 10 Filmes Mais Avaliados')
plt.xlabel('Quantidade de Avaliações')
plt.ylabel('Filme')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

# Cálculo das médias de avaliação com no mínimo 100 avaliações por filme
media_avaliacoes = avaliacoes.groupby('movie_id')['nota'].agg(['mean', 'count']).reset_index()
media_avaliacoes = media_avaliacoes[media_avaliacoes['count'] >= 100]
melhores_filmes = media_avaliacoes.sort_values(by='mean', ascending=False).head(10)
melhores_filmes = pd.merge(melhores_filmes, filmes[['movie_id', 'title']], on='movie_id')

print('\nTop 10 filmes com melhores notas (mínimo de 100 avaliações):')
print(melhores_filmes[['title', 'mean', 'count']])

# Gráfico: melhores filmes por nota média
plt.figure(figsize=(8, 4))
plt.barh(melhores_filmes['title'], melhores_filmes['mean'], color='lightgreen')
plt.title('Top 10 Filmes Melhor Avaliados (mínimo 100 avaliações)')
plt.xlabel('Nota Média')
plt.ylabel('Filme')
plt.xlim(3.5, 5)
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()