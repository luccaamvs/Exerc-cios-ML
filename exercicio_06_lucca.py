# -*- coding: utf-8 -*-
"""Exercicio-06-Lucca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JC0Poa2ZGEWqRU0k0g4Fs6xEdlBmOsmZ

Exercicio:
"""

# Crie classificadores de Naive Bayes e de regressão logística;
# Realize validações cruzadas em ambos os modelos para selecionar os melhores modelos treinados;
# Criar a matriz de confusão para mostrar as diferenças entre parâmetros
# Salvar o melhor modelo usando a biblioteca Pickle Python (consulte este link para referência)

"""Importações Básicas"""

import pandas as pd
import numpy as np
from sklearn.model_selection import KFold, cross_val_score, train_test_split
from sklearn.linear_model import LinearRegression #denovo regressão importada por via das duvidas
from sklearn.model_selection import KFold, cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression #regressão logistica
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score
import pickle
import matplotlib.pyplot as plt

banknote_dataset = pd.read_csv("data_banknote_authentication.txt", header = None)
banknote_dataset.head(10)

"""Ajustando Scaler"""

X = banknote_dataset.iloc[:, :-1]
y = banknote_dataset.iloc[:, -1]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""Iniciando Modelos"""

naive_bayes_model = GaussianNB()
logistic_model = LogisticRegression(solver='liblinear')

#Validação Cruzada
kf = KFold(n_splits=5, shuffle=True, random_state=42)
naive_scores = cross_val_score(naive_bayes_model, X_scaled, y, cv=kf, scoring='accuracy')
logistic_scores = cross_val_score(logistic_model, X_scaled, y, cv=kf, scoring='accuracy')

print("Naive Bayes -> Acurácia média: {:.4f}".format(np.mean(naive_scores)))
print("Regressão Logística -> Acurácia média: {:.4f}".format(np.mean(logistic_scores)))

"""Separação Teste/Treino"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
naive_bayes_model.fit(X_train, y_train)
logistic_model.fit(X_train, y_train)

"""Previsões"""

y_pred_nb = naive_bayes_model.predict(X_test)
y_pred_log = logistic_model.predict(X_test)

"""Matriz de Confusão"""

fig, axes = plt.subplots(1, 2, figsize=(12, 5))

cm_nb = confusion_matrix(y_test, y_pred_nb)
cm_log = confusion_matrix(y_test, y_pred_log)

disp1 = ConfusionMatrixDisplay(confusion_matrix=cm_nb, display_labels=[0, 1])
disp1.plot(ax=axes[0], cmap='Purples')
axes[0].set_title('Naive Bayes')

disp2 = ConfusionMatrixDisplay(confusion_matrix=cm_log, display_labels=[0, 1])
disp2.plot(ax=axes[1], cmap='Oranges')
axes[1].set_title('Regressão Logística')

plt.tight_layout()
plt.show()

"""Salvar modelo com Pickle"""

melhor_modelo = logistic_model if np.mean(logistic_scores) > np.mean(naive_scores) else naive_bayes_model
nome_arquivo = 'modelo_banco_melhor.pkl'

with open(nome_arquivo, 'wb') as arquivo:
    pickle.dump(melhor_modelo, arquivo)

print(f"\nModelo salvo como: {nome_arquivo}")